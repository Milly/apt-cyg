#!/bin/bash

# apt-cyg: install tool for cygwin similar to debian apt-get
#
# Copyright (C) 2005-9, Stephen Jungels
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# (http://www.fsf.org/licensing/licenses/gpl.html)

# this script requires some packages
for cmd in wget bzip2 tar awk # xz
do
  if ! which $cmd 1>/dev/null 2>/dev/null ; then
    echo You must install wget, tar, gawk, bzip2 and xz to use apt-cyg.
    exit 1
  fi
done
unset cmd
packages_essential=( cygwin coreutils gawk bzip2 xz tar wget bash )

# options
noupdate=1
files=()
nocase=0
match_desc=0
display_format=
download_only=0
command=""
packages=()
packages_auto=()
packages_newly=()
packages_upgrade=()
packages_reinstall=()
packages_remove=()
packages_essential_depends=()
config_cache=/etc/setup/last-cache
config_mirror=/etc/setup/last-mirror
mirror_url=

# functions

function usage()
{
  echo "apt-cyg: Installs and removes Cygwin packages."
  echo "  apt-cyg install <package names>       : install packages"
  echo "  apt-cyg reinstall <package names>     : re-install packages"
  echo "  apt-cyg remove <package names>        : remove packages"
  echo "  apt-cyg upgrade                       : upgrade all packages"
  echo "  apt-cyg mirrors                       : show mirrors"
  echo "  apt-cyg update                        : update setup.ini"
  echo "  apt-cyg show [<patterns>]             : show installed packages"
  echo "  apt-cyg versions [<patterns>]         : show installed packages versions"
  echo "  apt-cyg find <patterns>               : find packages matching patterns"
  echo "  apt-cyg search <patterns>             : (alias of find)"
  echo "  apt-cyg describe <patterns>           : describe packages matching patterns"
  echo "  apt-cyg info <patterns>               : (alias of describe)"
  echo "  apt-cyg packageof <commands or files> : locate parent packages"
  echo "Options:"
  echo "  --mirror, -M <url>   : set mirror"
  echo "  --cache, -c <dir>    : set cache"
  echo "  --file, -f <file>    : read package names from file"
  echo "  --update, -u         : force update setup.ini from mirror"
  echo "  --noupdate           : don't update setup.ini from mirror (default)"
  echo "  --ignore-case, -i    : ignore case distinctions in <patterns>"
  echo "  --match-desc, -m     : <patterns> match the package description"
  echo "  --display-format, -F <format>"
  echo "                       : specify output format for find command"
  echo "  --download-only, -d  : only download, not install or remove"
  echo "  --help"
  echo "  --version"
}

function version()
{
  echo "apt-cyg version 0.57"
  echo "Written by Stephen Jungels"
  echo ""
  echo "Copyright (c) 2005-9 Stephen Jungels.  Released under the GPL."
}

function get_arch()
{
  local arch
  case "$(uname -m)" in
    i[3456]86)
      arch=x86
    ;;
    x86_64)
      arch=x86_64
    ;;
  esac
  echo "$arch"
}

function get_mirrors()
{
  wget -qO - 'http://cygwin.com/mirrors.html' | awk \
    -e 'BEGIN { RS="<a ";FS="href=\"|\"[> ]"; inlist=0; lc=0 }' \
    -e '/name="sitelist"/ { inlist=1 }' \
    -e 'inlist && $2 ~ /^(https?|ftp):/ { print $2; lc++ }' \
    -e 'inlist && /<hr>/ { exit }' \
    -e 'END { if (!lc) exit 1 }'
  if (( $? )) ; then
    echo 1>&2 Cannot get mirrors
    exit 1
  fi
}

function findworkspace()
{
  local cache mirror_dir

  # default working directory and mirror

  mirror_url="http://mirrors.kernel.org/sourceware/cygwin/"
  cache="/var/cache/apt-cyg"

  # work wherever setup worked last, if possible

  [[ -e "$config_cache" ]] && \
    cache="$(cygpath -au -f "$config_cache" | head -1)"

  [[ -e "$config_mirror" ]] && \
    mirror_url="$(head -1 "$config_mirror")"
  mirror_url="${mirror_url%/}"

  mirror_dir="${mirror_url//:/%3a}/"
  mirror_dir="${mirror_dir//\//%2f}"
  mirror_dir="$mirror_dir/$(get_arch)"

  echo "Working directory is $cache"
  echo "Mirror is $mirror_url"
  mkdir -p "$cache/$mirror_dir"
  cd "$cache/$mirror_dir"
}

function getsetup()
{
  local mirror="$mirror_url/$(get_arch)"
  if (( ! noupdate )) ; then
    [[ -e setup.ini ]] && mv setup.ini setup.ini-save
    wget -N $mirror/setup.bz2
    if [[ -e setup.bz2 && $? -eq 0 ]] ; then
      bunzip2 setup.bz2
      mv setup setup.ini
      echo Updated setup.ini
    else
      wget -N $mirror/setup.ini
      if [[ -e setup.ini && $? -eq 0 ]] ; then
        echo Updated setup.ini
      elif [[ -e setup.ini-save ]] ; then
        mv setup.ini-save setup.ini
        echo Error updating setup.ini, reverting
      else
        echo Error updating setup.ini
        exit 1
      fi
    fi
  fi
  if [[ ! -e setup.ini ]] ; then
    echo -e '\nYou should run `apt-cyg update` first'
    exit 1
  fi
}

function checkpackages()
{
  if [[ ${#packages} -eq 0 ]] ; then
    echo Nothing to do, exiting
    exit 0
  fi
}

function install_packages_with_depends()
{
  local action pkg downloaded_file
  local -a installs depends losts essentials tmplist
  local -A files

  depends=( $(get_depend_packages "$@") )
  if [[ $? -ne 0 ]] ; then
    for pkg in "${depends[@]}"; do
      if [[ $pkg == l,* ]]; then
        losts+=( ${pkg#l,} )
      else
        installs+=( $pkg )
      fi
    done
    depends=( "${installs[@]}" )

    echo "The following packages are not found or ambiguous name:"
    echo "  ${losts[*]}"
  fi

  installs=( $(get_installable_packages "${depends[@]}") )

  # add force reinstall packages
  if [[ $command == reinstall ]] ; then
    for pkg in "$@" ; do
      pkg=${pkg#*,}
      [[ " ${installs[*]} ${losts[*]} " != *" $pkg "* ]] && installs+=( r,$pkg )
    done
  fi

  # check essential packages
  get_essential_packages_depends
  tmplist=( "${installs[@]}" )
  installs=()
  for pkg in "${tmplist[@]}" ; do
    if [[ " ${packages_essential_depends[*]} " == *" ${pkg#*,} "* ]]; then
      essentials+=( ${pkg#*,} )
    else
      installs+=( $pkg )
    fi
  done
  if [[ ${#essentials[*]} -ne 0 ]] ; then
    echo "The following packages are cannot upgrade, apt-cyg depends on it:"
    echo "  ${essentials[*]}"
  fi

  # check install target exists
  if [[ ${#installs[*]} -eq 0 ]] ; then
    echo "No packages will be installed, upgraded, or removed."
    return 0
  fi

  for pkg in "${installs[@]}" ; do
    action=${pkg%%,*} pkg=${pkg#*,}
    case $action in
      u) packages_upgrade+=( $pkg );;
      r) packages_reinstall+=( $pkg );;
      *)
        if [[ " $* " == *" $pkg "* ]] ; then
          packages_newly+=( $pkg )
        else
          packages_auto+=( $pkg )
        fi ;;
    esac
  done

  show_install_conditions
  select_continue || return 0

  echo ""
  echo "Downloading packages"
  for pkg in "${installs[@]#?,}" ; do
    download_package $pkg || return $?
    files[$pkg]="$downloaded_file"
  done

  (( download_only )) && return 0

  for pkg in "${installs[@]}" ; do
    action=${pkg%%,*} pkg=${pkg#*,}
    echo ""

    if [[ $action == u ]] ; then
      echo "Upgrading $pkg"
      remove_package "$pkg" || return $?
    fi

    install_package_noscripts $pkg "${files[$pkg]}"
    if [[ $? -ne 0 ]] ; then
      echo "Install failed: $pkg"
      return $?
    fi
    run_postinstall_scripts
  done

  echo ""
  echo "Done"
}

function remove_packages()
{
  local pkg
  local -a installed

  installed=( $(get_installed_packages) )
  for pkg in "$@" ; do
    if [[ " ${installed[*]} " != *" $pkg "* ]] ; then
      echo "Package $pkg is not installed, so it will not be removed"
    else
      packages_remove+=( $pkg )
    fi
  done
  [[ ${#installed[*]} -ne ${#packages_remove[*]} ]] && echo ""

  if [[ ${#packages_remove[*]} -eq 0 ]] ; then
    echo "No packages will be installed, upgraded, or removed."
    return 0
  fi

  show_install_conditions
  select_continue || return 0

  for pkg in "${packages_remove[@]}" ; do
    echo ""
    remove_package $pkg
  done

  echo ""
  echo "Done"
}

function show_install_conditions()
{
  local msg="${#packages_upgrade[*]} packages upgraded, $((${#packages_auto[*]} + ${#packages_newly[*]})) newly installed"
  if [[ ${#packages_auto[*]} -ne 0 ]] ; then
    echo "The following NEW packages will be automatically installed:"
    echo "  "${packages_auto[*]}
  fi
  if [[ ${#packages_newly[*]} -ne 0 ]] ; then
    echo "The following NEW packages will be installed:"
    echo "  "${packages_newly[*]}
  fi
  if [[ ${#packages_upgrade[*]} -ne 0 ]] ; then
    echo "The following packages will be upgraded:"
    echo "  "${packages_upgrade[*]}
  fi
  if [[ ${#packages_reinstall[*]} -ne 0 ]] ; then
    echo "The following packages will be REINSTALLED:"
    echo "  "${packages_reinstall[*]}
    msg+=", ${#packages_reinstall[*]} reinstalled"
  fi
  if [[ ${#packages_remove[*]} -ne 0 ]] ; then
    echo "The following packages will be REMOVED:"
    echo "  "${packages_remove[*]}
  fi
  msg+=" and ${#packages_remove[*]} to removed."
  echo "$msg"
}

function download_package()
{
  findworkspace >/dev/null
  local pkg=$1 file
  local -A desc

  eval "desc=( $(get_package_desc $pkg) )"
  if [[ -z "${desc[install_file]}" ]] ; then
    echo "Package $pkg is cannot fetch, install file not provided"
    return 1
  fi

  mkdir -p "release/$pkg"
  file="release/$pkg/${desc[install_file]}"
  downloaded_file="$file"

  # remove archive, if digest not match
  if [[ $noupdate -eq 0 && -f "$file" ]] || \
     ! check_digest "$file" "${desc[install_digest]}"
  then
    rm -f "$file"
  fi

  wget -nc -O "$file" "$mirror_url/${desc[install_path]}"
  if ! check_digest "$file" "${desc[install_digest]}"
  then
    echo "Digest did not match: $file"
    return 1
  fi
}

function check_digest()
{
  local file="$1" digest="$2"
  [[ -f "$file" ]] || return 2
  [[ "$(sha512sum "$file")" == "$digest "* ]]
}

function install_package_noscripts()
{
  findworkspace >/dev/null
  local pkg=$1 file="$2"

  echo "Installing $pkg"

  # unpack archive
  echo "Unpacking ${file##*/}"
  tar xvf "$file" -C / > "/etc/setup/$pkg.lst" || return 1
  gzip -f "/etc/setup/$pkg.lst"

  # update the package database
  awk -v pkg="$pkg" -v bz="${file##*/}" \
    '{if (ins != 1 && pkg < $1) {print pkg " " bz " 0"; ins=1}; print} \
     END{if (ins != 1) print pkg " " bz " 0"}' \
    /etc/setup/installed.db \
    > /etc/setup/installed.db-new
  mv /etc/setup/installed.db /etc/setup/installed.db-save
  mv /etc/setup/installed.db-new /etc/setup/installed.db
}

function run_postinstall_scripts()
{
  local post_scripts script
  post_scripts=( /etc/postinstall/*.sh )
  [[ "$post_scripts" == "/etc/postinstall/*.sh" ]] && return
  echo "Running postinstall scripts"
  for script in "${post_scripts[@]}" ; do
    $script
    mv $script $script.done
  done
}

function remove_package()
{
  local pkg=$1
  get_essential_packages_depends

  if [[ " ${packages_essential_depends[*]} " == *" $pkg "* ]] ; then
    echo "Package $pkg is cannot remove, apt-cyg depends on it"
    exit 1
  fi
  if [[ ! -e "/etc/setup/$pkg.lst.gz" ]] ; then
    echo "Package $pkg is cannot remove, missing manifest file"
    exit 1
  fi

  echo "Removing $pkg"

  # run preremove scripts
  if [[ -e "/etc/preremove/$pkg.sh" ]] ; then
    "/etc/preremove/$pkg.sh"
    rm "/etc/preremove/$pkg.sh"
  fi

  # update the package database
  cat "/etc/setup/$pkg.lst.gz" | gzip -d | awk '/[^\/]$/ {print "rm -f \"/" $0 "\""}' | sh
  rm "/etc/setup/$pkg.lst.gz"
  rm -f /etc/postinstall/$pkg.sh.done
  awk -v pkg="$pkg" '(pkg != $1){print}' \
    /etc/setup/installed.db \
    > /etc/setup/installed.db-new
  mv /etc/setup/installed.db /etc/setup/installed.db-save
  mv /etc/setup/installed.db-new /etc/setup/installed.db
}

function get_installed_packages()
{
  awk '/[^ ]+ [^ ]+ 0/ {print $1}' /etc/setup/installed.db
}

function get_installed_versions()
{
  # package-name package-name-1.2.3a4-5.tar.bz2 0
  awk '/[^ ]+ [^ ]+ 0/ {
         version = gensub("\\.tar\\.\\w+$", "", 1, substr($2, length($1)+2));
         print $1 "=" version;
       }' /etc/setup/installed.db
}

function get_avail_packages()
{
  local query
  IFS=$'\n' query="$*"
  [[ -n "$query" ]] && query="(${query//$'\n'/$')|('})"
  cat setup.ini 2>/dev/null | awk \
    -v IGNORECASE=${nocase#0} \
    -v query="$query" \
    -v match_desc="$match_desc" \
    -v display_format="${display_format:-"%p#"}\n" \
    -v installed="$(get_installed_versions)" \
    -v show_other_vers="${show_other_vers:-0}" \
    -v only_installed="${only_installed:-0}" \
    -e "
      $awk_util_functions
      $awk_parse_description
      $awk_format_description
    "'
      BEGIN {
        search_field = match_desc ? 0 : 1;
      }
      /^[^#]/ {
        avails[$1] = 1;
        if ($search_field ~ query &&
            (!only_installed || versions[$1] != "")) {
          vers = parsedesc($0, desc);
          if (!show_other_vers) vers = 1;
          for (i = 1; i <= vers; ++i) {
            if (!match_desc || $1 ~ query ||
                desc[i]["sdesc"] ~ query || desc[i]["ldesc"] ~ query) {
              printf("%s", format(desc[i]));
            }
          }
        }
      }
      END {
        for (pkg in versions) {
          if (versions[pkg] != "" && avails[pkg] == "" && pkg ~ query) {
            delete nodata;
            nodata["package"] = pkg;
            printf("%s", format(nodata))
          }
        }
      }
    '
}

function get_depend_packages()
{
  local packages
  IFS=$'\n' packages="$*"
  awk \
    -v packages="$packages" \
    -e "
      $awk_util_functions
      $awk_parse_description
    "'
      /^[^#]/ {
        parsedesc($0, desc);
        avails[ desc[1]["package"] ] = 1;
        split(desc[1]["requires"], deps, " ");
        for (i in deps)
          depends[$1][i] = deps[i];
      }

      END {
        split(packages, pkgs, "\n");
        find_deps(pkgs);
        for (i in ordered_deps)
          print ordered_deps[i];
        if (has_losts)
          exit 1;
      }

      function find_deps(pkgs,  idx, pkg) {
        for (i in pkgs) {
          pkg = pkgs[i];
          if (!all_deps[pkg]) {
            all_deps[pkg] = 1;
            if (!(pkg in avails)) {
              has_losts = 1;
              pkg = "l," pkg;
            } else if (pkg in depends) {
              idx = find_deps(depends[pkg], idx);
            }
            ordered_deps[++idx] = pkg;
          }
        }
        return idx;
      }
    ' \
    setup.ini
}

function get_package_desc()
{
  awk \
    -v package="$1" \
    -v version="$2" \
    -e "
      $awk_util_functions
      $awk_parse_description
    "'
      /^[^#]/ && ($1 == package) {
        vers = parsedesc($0, desc);
        for (i = 1; i <= vers; ++i) {
          if (version && version != desc[i]["version"])
            continue;
          for (n in desc[i])
            print "[" n "]=\x27" gensub("\x27", "\x27\\\\\x27\x27", "g", desc[i][n]) "\x27";
          exit;
        }
      }
    ' \
    setup.ini
}

function get_installable_packages()
{
  local packages
  IFS=$'\n' packages="$*"
  awk \
    -v packages="$packages" \
    -v installed="$(get_installed_versions)" \
    -e "
      $awk_util_functions
      $awk_parse_description
      $awk_format_description
    "'
      /^[^#]/ && 0 < index("\n" packages "\n", "\n" $1 "\n") {
        parsedesc($0, desc);
        for (i in desc[1])
          pkgdesc[$1][i] = desc[1][i];
      }
      END {
        j = split(packages, pkgs, "\n");
        for (i = 1; i <= j; ++i) {
          pkg = pkgs[i];
          v1 = versions[pkg];
          v2 = pkgdesc[pkg]["version"];
          if (v1 == "") {
            print "i," pkg;
          } else if (0 < comp_ver(v1, v2)) {
            print "u," pkg;
          }
        }
      }
    ' \
    setup.ini
}

function get_essential_packages_depends()
{
  local pkg
  [[ ${#packages_essential_depends} == 0 ]] || return
  for pkg in $(get_depend_packages "${packages_essential[@]}"); do
    [[ $pkg != _* ]] && packages_essential_depends+=( $pkg )
  done
}

function find_package_files()
{
  local pkg query
  for pkg in "$@" ; do
    query="${query}|($(which "$pkg" 2>/dev/null || echo "$pkg"))"
  done
  query="${query#|}"
  (
    cd /etc/setup
    for manifest in *.lst.gz ; do
      gzip -dc "$manifest" | awk \
        -v IGNORECASE=${nocase#0} \
        -v query="$query" \
        -v package="${manifest%.lst.gz}" \
        'BEGIN{RS="\n"} ("/"$0 ~ query){printf("%s: %s\n", package, "/"$0)}'
    done
  )
}

function select_continue()
{
  local res
  for ((;;)) ; do
    read -p "Do you want to continue? [Y/n] " res
    case "${res:-y}" in
      [Yy]) return 0;;
      [Nn]) return 1;;
    esac
    echo "Invalid response; please enter 'y' or 'n'."
  done
}

function init_awk_scripts()
{
read -r -d $'\0' awk_util_functions <<'_END_awk_util_functions_'
  function joinspace(str) {
    return gensub("[[:space:]]+", " ", "g", str);
  }

  function delquote(str) {
    return gensub("^\"(.*)\"$", "\\1", 1, str);
  }

  function splitget(str, idx, sep    ,ary) {
    split(str, ary, sep);
    return ary[idx];
  }

  function comp_ver(v1, v2    ,a1,a2,i,j1,j2) {
    if (v1 == v2) return 0;
    v1 = gensub("([0-9]+)([a-zA-Z]+)([0-9]*)", "\1,\2,\3", "g", v1);
    v2 = gensub("([0-9]+)([a-zA-Z]+)([0-9]*)", "\1,\2,\3", "g",  v2);
    return comp_ver_sub(v1, v2, "[.-]", ",");
  }

  function comp_ver_sub(v1, v2, sep, nsep    ,res,a1,a2,i,j1,j2) {
    if (v1 == v2) return 0;
    j1 = split(v1, a1, sep);
    j2 = split(v2, a2, sep);
    j1 = (j1 < j2) ? j2 : j1;
    for (i = 1; i <= j1; ++i) {
      if (nsep != "") {
        res = comp_ver_sub(a1[i], a2[i], nsep);
        if (res != 0) return res;
      } else {
        if (int(a1[i]) < int(a2[i])) return 1;
        if (int(a1[i]) > int(a2[i])) return -1;
        if (a1[i] < a2[i]) return 1;
        if (a1[i] > a2[i]) return -1;
      }
    }
    return 0;
  }
_END_awk_util_functions_
typeset -r awk_util_functions

read -r -d $'\0' awk_parse_description <<'_END_awk_parse_description_'
  BEGIN { RS="\n\n@ "; FS="\n"; }

  function parsedesc(str, res    ,ver,ary,i,j,p) {
    delete res;
    str = gensub("\\n\\[([^\\n]*)\\]\\n", "\0release: \\1\n", "g", str);
    j = split(str, ary, "\0");
    parsedesc_sub(ary[1] "\nrelease: current", ver);
    for (p in ver) res[1][p] = ver[p];
    for (i = 2; i <= j; ++i) {
      parsedesc_sub(ary[1] "\n" ary[i], ver);
      for (p in ver) res[i][p] = ver[p];
    }
    return j;
  }

  function parsedesc_sub(str, res    ,ary,ary2,i,j,n) {
    delete res;
    str = gensub("\n(\\w+): ", "\0\\1\0", "g", str);
    j = split(str, ary, "\0");
    res["package"] = ary[1];
    for (i = 2; i <= j; i += 2) {
      n = tolower(ary[i]);
      res[n] = delquote(joinspace( ary[i+1] ));
      if ( n == "install" || n == "source" ) {
        split(ary[i+1], ary2, " ");
        res[n "_path"] = ary2[1];
        res[n "_file"] = gensub(".*/", "", 1, ary2[1]);
        res[n "_size"] = ary2[2];
        res[n "_digest"] = ary2[3];
      }
    }
  }
_END_awk_parse_description_
typeset -r awk_parse_description

read -r -d $'\0' awk_format_description <<'_END_awk_format_description_'
  BEGIN {
    j = split(installed, pkgs, "\n");
    for (i = 1; i <= j; ++i) {
      split(pkgs[i], p, "=");
      versions[p[1]] = p[2];
    }
    flen["a"] =  1;
    flen["A"] = 10;
    flen["c"] =  1;
    flen["C"] = 11;
    flen["d"] = 40; fext["d"] = 1;
    flen["g"] = 30; fext["g"] = 1;
    flen["l"] = 40; fext["l"] = 1;
    flen["o"] = 15;
    flen["p"] = 30; fext["p"] = 1;
    flen["r"] =  0; fext["r"] = 1;
    flen["s"] = 10;
    flen["v"] = 10;
    flen["V"] = 10;
  }

  function format_vars(desc, res    ,v) {
    delete res;
    v = versions[ desc["package"] ];
    res["a"] = "=";
    res["A"] = "";
    res["c"] = (v == "") ? "p" : "i";
    res["C"] = (v == "") ? "purged" : "installed";
    res["d"] = desc["sdesc"];
    res["g"] = desc["category"];
    res["l"] = desc["ldesc"];
    res["o"] = splitget(desc["install"], 2);
    res["p"] = desc["package"];
    res["r"] = desc["requires"];
    res["s"] = none_or(desc["release"]);
    res["v"] = none_or(v);
    res["V"] = none_or(desc["version"]);
    if (mode == "install") {
      if (v == "") {
        res["a"] = "i";
        res["A"] = "install";
      } else {
        res["a"] = "u";
        res["A"] = "upgrade";
      }
    } else if (mode == "remove") {
      res["a"] = "p";
      res["A"] = "purge";
    }
  }

  function none_or(val) {
    return (val == "") ? "<none>" : val;
  }

  function format(desc    ,res,ary,i,j,len,val,param,m) {
    format_vars(desc, vars);
    j = split(display_format, ary, "%");
    res = ary[1];
    for (i = 2; i <= j; ++i) {
      if (ary[i] == "") {
        res = res "%" ary[++i];
      } else {
        param = gensub("^([0-9]*)(\\??)([a-zA-Z])(#?).*",
                       "\\1,\\2,\\3,\\4", 1, ary[i]);
        if (param != ary[i]) {
          split(param, m, ",");
          len = (m[1] == "") ? flen[m[3]] : int(m[1]);
          val = vars[m[3]];
          s = substr(ary[i], length(param)-2);
          if (len != "") {
            if (len < length(val) && !m[2] &&
                (m[1] != "" || !fext[m[3]] && !m[4])) {
              # if not expandable
              val = substr(val, 1, len);
            } else if (substr(s, 1, 1) != "\n") {
              # if not line end
              val = sprintf("%-*s", len, val);
            }
          }
          res = res val s;
        } else {
          res = res "%" ary[i];
        }
      }
    }
    return res;
  }
_END_awk_format_description_
typeset -r awk_format_description
}

# command methods

function aptcyg_mirrors()
{
  get_mirrors
}

function aptcyg_update()
{
  noupdate=0
  findworkspace
  getsetup
}

function aptcyg_show()
{
  findworkspace >/dev/null
  echo 1>&2 The following packages are installed:
  only_installed=1 \
    get_avail_packages "${packages[@]}"
}

function aptcyg_versions()
{
  display_format="${display_format:-"%p# =%v#"}" \
    aptcyg_show
}

function aptcyg_find()
{
  checkpackages
  findworkspace
  getsetup
  echo ""
  echo "Searching packages:"
  display_format="${display_format:-"%c %p =%v -- %d"}" \
    get_avail_packages "${packages[@]}"
}
function aptcyg_search()
{
  aptcyg_find
}

function aptcyg_describe()
{
  checkpackages
  findworkspace
  getsetup
  echo ""
  show_other_vers=1 \
  display_format='%c -- %p#\nDescription: %d#\n  %l#\nCategory: %g#\nRequires: %r#\nVersion: %V# (%1?s)\n' \
    get_avail_packages "${packages[@]}"
}
function aptcyg_info()
{
  aptcyg_describe
}

function aptcyg_packageof()
{
  checkpackages
  find_package_files "${packages[@]}"
}

function aptcyg_install()
{
  checkpackages
  findworkspace
  getsetup
  echo ""
  install_packages_with_depends "${packages[@]}"
}
function aptcyg_reinstall()
{
  aptcyg_install
}

function aptcyg_remove()
{
  checkpackages
  echo ""
  remove_packages "${packages[@]}"
}

function aptcyg_upgrade()
{
  findworkspace
  getsetup
  echo ""
  install_packages_with_depends $(get_installed_packages)
}

function aptcyg_help()
{
  usage
}

# main

function process_args()
{
  while (( $# )) ; do
    case "$1" in

      --mirror|-M)
        echo "$2" > "$config_mirror"
        shift ; shift
      ;;

      --cache|-c)
        cygpath -aw "$2" > "$config_cache"
        shift ; shift
      ;;

      --noupdate)
        noupdate=1
        shift
      ;;

      --update|-u)
        noupdate=0
        shift
      ;;

      --help)
        usage
        exit 0
      ;;

      --version)
        version
        exit 0
      ;;

      --file|-f)
        if [[ -n "$2" ]] ; then
          files=( "${files[@]}" "$2" )
          shift
        else
          echo 1>&2 No file name provided, ignoring $1
        fi
        shift
      ;;

      --ignore-case|-i)
        nocase=1
        shift
      ;;

      --no-ignore-case|-no-i)
        nocase=0
        shift
      ;;

      --match-desc|-m)
        match_desc=1
        shift
      ;;

      --display-format|-F)
        display_format="$2"
        shift ; shift
      ;;

      --download-only|-d)
        download_only=1
        shift
      ;;

      *)
        if [[ -z "$command" ]] ; then
          command=$1
        else
          packages=( "${packages[@]}" "$1" )
        fi
        shift
      ;;

    esac
  done
}

function run()
{
  # Check to see if global options are defined
  if [[ ! -z "$APTCYG_OPTIONS" ]] ; then
    # If we only have one element, assume it's a string to split
    #  and parse as an array
    if [[ "${#APTCYG_OPTIONS[*]}" -eq "1" ]] ; then
      APTCYG_OPTIONS=($APTCYG_OPTIONS)
    fi
    process_args "${APTCYG_OPTIONS[@]}"
  fi

  process_args "$@"

  if [[ ${#files} -ne 0 ]] ; then
    for file in "${files[@]}" ; do
      if [[ "$file" == - ||  -f "$file" ]] ; then
        packages=( "${packages[@]}" $(cat -- "$file") )
      else
        echo 1>&2 File $file not found, skipping
      fi
    done
  fi

  local call_command=aptcyg_${command:=help}
  if [[ $(LANG=C type $call_command) == "$call_command is a function"* ]] 2>/dev/null ; then
    init_awk_scripts
    $call_command
  else
    echo "invalid command: $command"
  fi
}

run "$@"
