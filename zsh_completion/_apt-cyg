#compdef apt-cyg

local curcontext="$curcontext" state line cmds ret=1

function _cygwin_mirrors() {
  local mirrors expl
  mirrors=( ${(f)"$(LC_ALL=C _call_program commands apt-cyg mirrors 2>/dev/null)"} )
  _wanted urls expl 'URL of cygwin mirror' compadd ${mirrors}
}

function _cygwin_packages() {
  local pkgset="$argv[$#]" expl cachevar update_policy

  zstyle -s ":completion:*:*:$service:*" cache-policy update_policy
  if [[ -z "$update_policy" ]]; then
    zstyle ":completion:*:*:$service:*" cache-policy _cygwin_packages_caching_policy
  fi

  expl=("${(@)argv[1,-2]}")
  _cygwin_packages_update_cache $pkgset
  typeset -gH $cachevar
  _tags packages && _values -s ' ' "$pkgset packages" "${(@P)cachevar}"
}

_cygwin_packages_update_cache() {
  local pkgset="$1"
  if ( [[ ${+_cygwin_packages_cache} -eq 0 ]] ||
       _cache_invalid CYGPACK_all ) &&
       ! _retrieve_cache CYGPACK_all
  then
    typeset -U _cygwin_packages_cache
    _cygwin_packages_cache=(
      ${(@)${(@M)${(f)"${${$(LC_ALL=C _call_program commands apt-cyg -F "'%c,%1?p|%1?d'" find . 2>/dev/null)//\[/\\[}//\]/\\]}"}##[ip],*}/|/[}\]
    )
    _store_cache CYGPACK_all _cygwin_packages_cache
  fi
  _cygwin_packages_cache_avail=( ${(@)_cygwin_packages_cache#*,} )
  _cygwin_packages_cache_installed=( ${${(M)_cygwin_packages_cache##i,*}#i,} )
  _cygwin_packages_cache_uninstalled=( ${${(M)_cygwin_packages_cache##p,*}#p,} )
  cachevar=_cygwin_packages_cache_$pkgset
}

_cygwin_packages_caching_policy () {
  [[ "$1" -ot /etc/setup/installed.db ]]
}

# Helper function for -F / --display-format
function _aptcyg_format_strings() {
  _values -s , 'format string' \
    '%%[Literal %]' \
    '%c[Current state flag]' \
    '%C[Current state]' \
    '%d[Description]' \
    '%l[Long Description]' \
    '%o[Download size]' \
    '%p[Package name]' \
    '%r[Requires]' \
    '%s[Section (Category)]' \
    '%v[Current version]' \
    '%V[Candidate version]'
}

_arguments -C \
  '(- 1 *)--help[display help information]' \
  '(- 1 *)--version[display version information]' \
  '(-m --mirror)'{-m,--mirror}'[set mirror]:mirror url:_cygwin_mirrors' \
  '(-c --cache)'{-c,--cache}'[set cache]:cache dir:_dirs' \
  '(-f --file)'{-f,--file}'[read package names from file]:files:_files' \
  '(-u --update --noupdate)'{-u,--update}'[force update setup.ini from mirror]' \
  "(-u --update)--noupdate[don't update setup.ini from mirror (default)]" \
  '(-i --ignore-case)'{-i,--ignore-case}'[ignore case distinctions in <patterns> when finding packages]' \
  '(-d --match-desc)'{-d,--match-desc}'[<patterns> match the package description]' \
  '(-F --display-format)'{-F,--display-format}'[specify output format for find command]:format:_aptcyg_format_strings' \
  '1: :->cmds' \
  '*: :->args' && ret=0

case $state in
  cmds)
    cmds=( ${${(M)${(f)"$(LC_ALL=C _call_program commands apt-cyg --help 2>/dev/null)"}:# *apt-cyg [a-z]* : *}/(#b)*apt-cyg ([^ ]#) * : (*)/$match[1]:$match[2]:l} )
    _describe -t commands 'apt-cyg command' cmds && ret=0
  ;;
  args)
    case $line[1]; in
      install)
        _cygwin_packages uninstalled && ret=0
      ;;
      reinstall)
        _cygwin_packages avail && ret=0
      ;;
      remove)
        _cygwin_packages installed && ret=0
      ;;
      find|search|describe|info)
        _message -e patterns pattern
      ;;
      packageof)
        _alternative \
          'commands:command: _command_names -e' \
          'files:file:_files' \
          && ret=0
      ;;
      *)
        (( ret )) && _message 'no more arguments'
      ;;
    esac
  ;;
esac

return ret
